#!/usr/bin/env node
/**
 * SendProgram
 *
 * @param config
 * ETHNode: {
 *  chain: 'ETH',
 *  host: 'localhost',
 *  rpcPort: '8545',
 *  protocol: 'http',
 *  tokens : {
 *    GUSD: {
 *      tokenContractAddress: '0xd0683a2f4e9ecc9ac6bb41090b4269f7cacdd5d4',
 *      type: 'ERC20'
 *    },
 *    USDC: {
 *      tokenContractAddress: '0xc92e381c387edbfd2e2112f3054896dd20ac3d31',
 *      type: 'ERC20'
 *    }
 *  }
 *}
 */
const SendProgram = {
  start: (config, program) => {
    const CryptoRPC = require('../lib');
    let { node, currency, address, amount } = program;
    const rpcHost = config[node];
    if (!rpcHost) {
      throw new Error('ERROR: Node is not in the config');
    }
    const { chain, host, rpcPort, protocol, rpcUser, rpcPass } = rpcHost;
    let rpcs = new CryptoRPC({
      chain,
      host,
      rpcPort,
      rpcUser,
      rpcPass,
      protocol,
      tokens: rpcHost.tokens
    });
    amount = Number(amount);
    return rpcs.unlockAndSendToAddress({currency, address, amount});
  }
};

if (require.main === module) {
  const config = require('../config');
  const program = require('commander');
  program
    .option('--node <node>')
    .option('--currency <currency>')
    .option('--address <address>')
    .option('--amount <amount>');

  try{
    program.parse(process.argv);
  } catch (e) {
    console.error(e.message);
    program.help();
    process.exit(1);
  }
  SendProgram.start(config, program)
    .then(balance => global.console.log(balance))
    .catch(err => console.error(err));
}

module.exports = SendProgram;
