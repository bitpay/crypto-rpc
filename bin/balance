#!/usr/bin/env node
/**
 * BalanceProgram.start
 *
 * @param config
 * ETHNode: {
 *  host: 'localhost',
 *  rpcPort: '8545',
 *  protocol: 'http',
 *  currencies : {
 *    GUSD: {
 *      tokenContractAddress: '0xd0683a2f4e9ecc9ac6bb41090b4269f7cacdd5d4'
 *    },
 *    USDC: {
 *      tokenContractAddress: '0xc92e381c387edbfd2e2112f3054896dd20ac3d31'
 *    }
 *  }
 *}
 */
const BalanceProgram = {
  start: async (config, program) => {
    const CryptoRPC = require('../rpcs');
    const util = require('util');
    const { node, currency, address } = program;
    const rpcHost = config[node];
    if(rpcHost) {
      const currencyConfig = rpcHost.currencies[currency] || {};
      let rpcs = new CryptoRPC(rpcHost, currencyConfig);

      rpcs.getBalance({currency, address}).then((balance) => {
        console.log(`${currency} ${util.inspect(balance)}`)
      });
    } else {
      console.error('ERROR: Node is not in the config');
    }
  }
};

if (require.main === module) {
  const config = require('../config');
  const program = require('commander');
  try{
    program
      .option('--node <node>')
      .option('--currency <currency>')
      .option('--address <address>')

    program.parse(process.argv);
    BalanceProgram.start(config, program);
  } catch (e) {
    console.log(e.message);
    program.help()
  }
}


module.exports = BalanceProgram;
